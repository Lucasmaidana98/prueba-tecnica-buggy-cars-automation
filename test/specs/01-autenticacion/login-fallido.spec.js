const LoginPage = require('../../pageobjects/LoginPage');

describe('Autenticaci√≥n - Login Fallido', () => {
    
    before(() => {
        log.seccion('üîê AUTENTICACI√ìN: Validaci√≥n de credenciales incorrectas');
    });

    beforeEach(async () => {
        await browser.url('/');
        await browser.maximizeWindow();
        
        // Asegurar estado sin autenticaci√≥n
        try {
            if (await LoginPage.usuarioEstaAutenticado()) {
                await LoginPage.cerrarSesion();
            }
        } catch (error) {
            // Continuar si no hay sesi√≥n
        }
    });

    it('LOGIN_FAIL_001 - Credenciales incorrectas son rechazadas', async () => {
        log.info('Verificando rechazo de credenciales incorrectas');
        
        // Paso 1: Intentar login con credenciales incorrectas
        await LoginPage.iniciarSesion(credenciales.invalidas.email, credenciales.invalidas.password);
        await browser.pause(3000);
        
        // Paso 2: Verificar que NO se autentic√≥
        const estaAutenticado = await LoginPage.usuarioEstaAutenticado();
        expect(estaAutenticado).to.be.false;
        log.exito('Usuario correctamente NO autenticado con credenciales incorrectas');
        
        // Paso 3: Verificar que el formulario de login sigue visible
        const formularioVisible = await LoginPage.formularioLoginVisible();
        expect(formularioVisible).to.be.true;
        log.exito('Formulario de login sigue disponible despu√©s de intento fallido');
        
        await capturarPantallaConNombre('LOGIN_FAIL_001_credenciales_incorrectas', 'VERIFICADO');
    });

    it('LOGIN_FAIL_002 - Email vac√≠o no permite autenticaci√≥n', async () => {
        log.info('Verificando validaci√≥n de email vac√≠o');
        
        // Paso 1: Intentar login con email vac√≠o
        await LoginPage.iniciarSesion('', credenciales.validas.password);
        await browser.pause(2000);
        
        const autenticadoEmailVacio = await LoginPage.usuarioEstaAutenticado();
        expect(autenticadoEmailVacio).to.be.false;
        log.exito('Login correctamente rechazado con email vac√≠o');
        
        await capturarPantallaConNombre('LOGIN_FAIL_002_email_vacio', 'VERIFICADO');
    });

    it('LOGIN_FAIL_003 - Password vac√≠o no permite autenticaci√≥n', async () => {
        log.info('Verificando validaci√≥n de password vac√≠o');
        
        // Paso 1: Limpiar y intentar con password vac√≠o
        await LoginPage.limpiarFormulario();
        await LoginPage.iniciarSesion(credenciales.validas.email, '');
        await browser.pause(2000);
        
        const autenticadoPasswordVacio = await LoginPage.usuarioEstaAutenticado();
        expect(autenticadoPasswordVacio).to.be.false;
        log.exito('Login correctamente rechazado con password vac√≠o');
        
        await capturarPantallaConNombre('LOGIN_FAIL_003_password_vacio', 'VERIFICADO');
    });

    it('LOGIN_FAIL_004 - Ambos campos vac√≠os no permiten autenticaci√≥n', async () => {
        log.info('Verificando validaci√≥n de ambos campos vac√≠os');
        
        // Paso 1: Intentar con ambos campos vac√≠os
        await LoginPage.limpiarFormulario();
        await LoginPage.iniciarSesion('', '');
        await browser.pause(2000);
        
        const autenticadoAmbosVacios = await LoginPage.usuarioEstaAutenticado();
        expect(autenticadoAmbosVacios).to.be.false;
        log.exito('Login correctamente rechazado con ambos campos vac√≠os');
        
        await capturarPantallaConNombre('LOGIN_FAIL_004_campos_vacios', 'VERIFICADO');
    });

    it('LOGIN_FAIL_005 - M√∫ltiples intentos fallidos son manejados', async () => {
        log.info('Verificando robustez ante m√∫ltiples intentos fallidos');
        
        // Paso 1: Realizar m√∫ltiples intentos de login en sucesi√≥n
        for (let i = 0; i < 3; i++) {
            await LoginPage.iniciarSesion('usuario_falso', 'password_falso');
            await browser.pause(1000);
            
            const estaAutenticado = await LoginPage.usuarioEstaAutenticado();
            expect(estaAutenticado).to.be.false;
        }
        
        log.exito('Sistema resistente a m√∫ltiples intentos de login fallidos');
        
        // Paso 2: Verificar que despu√©s se puede hacer login normal
        await LoginPage.iniciarSesion(credenciales.validas.email, credenciales.validas.password);
        await browser.pause(2000);
        
        const loginNormalExitoso = await LoginPage.usuarioEstaAutenticado();
        expect(loginNormalExitoso).to.be.true;
        log.exito('Login normal funciona despu√©s de m√∫ltiples intentos fallidos');
        
        await capturarPantallaConNombre('LOGIN_FAIL_005_multiples_intentos', 'VERIFICADO');
    });
});